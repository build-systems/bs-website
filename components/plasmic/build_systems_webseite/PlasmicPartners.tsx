// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: edADxkrxNS9ND5YewKEz7S
// Component: oC8XV-HKfrXV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_5XwAguWqqS0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5XW-aguWqqS0/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems_webseite.module.css"; // plasmic-import: edADxkrxNS9ND5YewKEz7S/projectcss
import sty from "./PlasmicPartners.module.css"; // plasmic-import: oC8XV-HKfrXV/css

createPlasmicElementProxy;

export type PlasmicPartners__VariantMembers = {};
export type PlasmicPartners__VariantsArgs = {};
type VariantPropType = keyof PlasmicPartners__VariantsArgs;
export const PlasmicPartners__VariantProps = new Array<VariantPropType>();

export type PlasmicPartners__ArgsType = {};
type ArgPropType = keyof PlasmicPartners__ArgsType;
export const PlasmicPartners__ArgProps = new Array<ArgPropType>();

export type PlasmicPartners__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPartnersProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPartners__RenderFunc(props: {
  variants: PlasmicPartners__VariantsArgs;
  args: PlasmicPartners__ArgsType;
  overrides: PlasmicPartners__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5XwAguWqqS0()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__fFt3R)}>
        <div className={classNames(projectcss.all, sty.freeBox__iriYb)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__yo8KO)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/bmWiLogo20212Png2.png",
              fullWidth: 964,
              fullHeight: 471,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__axmS3)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__nG20O)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "iPhone") ? "110%" : "100%"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/baykaLogo2Png.png",
              fullWidth: 1157,
              fullHeight: 417,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__oaDEs)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__eMrK)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "iPhone") ? "115%" : "110%"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/dena2Png2.png",
              fullWidth: 5050,
              fullHeight: 1632,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__amWUl)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__gV160)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/energieEffizienzpng2.png",
              fullWidth: 784,
              fullHeight: 164,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rp3Wn)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__xPh9W)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/_20221218TumvlLogoWeissRgbpng2.png",
              fullWidth: 1601,
              fullHeight: 622,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__ntC07)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__qoc8U)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/germanyAustriaSwitzerlandLogoHorizontalColor1805X168Png2.png",
              fullWidth: 1065,
              fullHeight: 222,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__cDuCh)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__vmWcs)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/bayernInnovativLogoMitClaimpng.png",
              fullWidth: 1149,
              fullHeight: 270,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__i0FLy)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__ekInk)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/build_systems_webseite/images/logoBayerischesStaatsministeriumWirtschaftLandesentwicklungUndEnergiepng.png",
              fullWidth: 2119,
              fullHeight: 254,
              aspectRatio: undefined
            }}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPartners__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPartners__VariantsArgs;
    args?: PlasmicPartners__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPartners__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPartners__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPartners__ArgProps,
          internalVariantPropNames: PlasmicPartners__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPartners__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartners";
  } else {
    func.displayName = `PlasmicPartners.${nodeName}`;
  }
  return func;
}

export const PlasmicPartners = Object.assign(
  // Top-level PlasmicPartners renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPartners
    internalVariantProps: PlasmicPartners__VariantProps,
    internalArgProps: PlasmicPartners__ArgProps
  }
);

export default PlasmicPartners;
/* prettier-ignore-end */
