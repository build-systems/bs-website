// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: edADxkrxNS9ND5YewKEz7S
// Component: bEXx7YkyU3Re

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems_webseite.module.css"; // plasmic-import: edADxkrxNS9ND5YewKEz7S/projectcss
import sty from "./PlasmicObservable.module.css"; // plasmic-import: bEXx7YkyU3Re/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 2TGCNEZPKn4C/icon

createPlasmicElementProxy;

export type PlasmicObservable__VariantMembers = {};
export type PlasmicObservable__VariantsArgs = {};
type VariantPropType = keyof PlasmicObservable__VariantsArgs;
export const PlasmicObservable__VariantProps = new Array<VariantPropType>();

export type PlasmicObservable__ArgsType = {};
type ArgPropType = keyof PlasmicObservable__ArgsType;
export const PlasmicObservable__ArgProps = new Array<ArgPropType>();

export type PlasmicObservable__OverridesType = {
  root?: p.Flex<"div">;
  iframe?: p.Flex<typeof Iframe>;
  section?: p.Flex<"section">;
  svg?: p.Flex<"svg">;
};

export interface DefaultObservableProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicObservable__RenderFunc(props: {
  variants: PlasmicObservable__VariantsArgs;
  args: PlasmicObservable__ArgsType;
  overrides: PlasmicObservable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        className={classNames("__wab_instance", sty.embedHtml__kqdRk)}
        code={
          '<div id="observablehq-viewof-table-bed8bc84"></div>\n<p>Credit: <a href="https://observablehq.com/d/4926a97995ef223b@78">Exploring Olympic athletes data by BuildSystems</a></p>\n\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@observablehq/inspector@5/dist/inspector.css">\n<script type="module">\nimport {Runtime, Inspector} from "https://cdn.jsdelivr.net/npm/@observablehq/runtime@5/dist/runtime.js";\nimport define from "https://api.observablehq.com/d/4926a97995ef223b@78.js?v=3&api_key=c59450f694d3f86acc08d169390158cb149c760d";\nnew Runtime().module(define, name => {\n  if (name === "viewof table") return new Inspector(document.querySelector("#observablehq-viewof-table-bed8bc84"));\n});\n</script>'
        }
      />

      <Iframe
        data-plasmic-name={"iframe"}
        data-plasmic-override={overrides.iframe}
        className={classNames("__wab_instance", sty.iframe)}
        preview={true}
        src={
          "https://observablehq.com/embed/@ramonweber/buildingforzero?cells=chart%2Cgraph%2Cviewof+col2%2Cviewof+col1%2Cviewof+scenario_text%2Cviewof+ssp_text%2Cviewof+buildings_emissions%2Cviewof+heading_text"
        }
      />

      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <IconIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </section>
      <Embed
        className={classNames("__wab_instance", sty.embedHtml__eT5Ww)}
        code={""}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "iframe", "section", "svg"],
  iframe: ["iframe"],
  section: ["section", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  iframe: typeof Iframe;
  section: "section";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicObservable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicObservable__VariantsArgs;
    args?: PlasmicObservable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicObservable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicObservable__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicObservable__ArgProps,
          internalVariantPropNames: PlasmicObservable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicObservable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicObservable";
  } else {
    func.displayName = `PlasmicObservable.${nodeName}`;
  }
  return func;
}

export const PlasmicObservable = Object.assign(
  // Top-level PlasmicObservable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iframe: makeNodeComponent("iframe"),
    section: makeNodeComponent("section"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicObservable
    internalVariantProps: PlasmicObservable__VariantProps,
    internalArgProps: PlasmicObservable__ArgProps
  }
);

export default PlasmicObservable;
/* prettier-ignore-end */
