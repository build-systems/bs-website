// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: edADxkrxNS9ND5YewKEz7S
// Component: t-O0e7eN3aHH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_5XwAguWqqS0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5XW-aguWqqS0/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_build_systems_webseite.module.css"; // plasmic-import: edADxkrxNS9ND5YewKEz7S/projectcss
import sty from "./PlasmicSmallButton.module.css"; // plasmic-import: t-O0e7eN3aHH/css

createPlasmicElementProxy;

export type PlasmicSmallButton__VariantMembers = {
  noLeftSiteShift: "noLeftSiteShift";
  plus: "plus";
};
export type PlasmicSmallButton__VariantsArgs = {
  noLeftSiteShift?: SingleBooleanChoiceArg<"noLeftSiteShift">;
  plus?: SingleBooleanChoiceArg<"plus">;
};
type VariantPropType = keyof PlasmicSmallButton__VariantsArgs;
export const PlasmicSmallButton__VariantProps = new Array<VariantPropType>(
  "noLeftSiteShift",
  "plus"
);

export type PlasmicSmallButton__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSmallButton__ArgsType;
export const PlasmicSmallButton__ArgProps = new Array<ArgPropType>("children");

export type PlasmicSmallButton__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultSmallButtonProps {
  children?: React.ReactNode;
  noLeftSiteShift?: SingleBooleanChoiceArg<"noLeftSiteShift">;
  plus?: SingleBooleanChoiceArg<"plus">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSmallButton__RenderFunc(props: {
  variants: PlasmicSmallButton__VariantsArgs;
  args: PlasmicSmallButton__ArgsType;
  overrides: PlasmicSmallButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noLeftSiteShift",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noLeftSiteShift
      },
      {
        path: "plus",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.plus
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5XwAguWqqS0()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootnoLeftSiteShift]: hasVariant(
            $state,
            "noLeftSiteShift",
            "noLeftSiteShift"
          ),
          [sty.rootplus]: hasVariant($state, "plus", "plus")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxnoLeftSiteShift]: hasVariant(
            $state,
            "noLeftSiteShift",
            "noLeftSiteShift"
          ),
          [sty.freeBoxplus]: hasVariant($state, "plus", "plus")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "+   mehr ",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrennoLeftSiteShift]: hasVariant(
              $state,
              "noLeftSiteShift",
              "noLeftSiteShift"
            ),
            [sty.slotTargetChildrenplus]: hasVariant($state, "plus", "plus")
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSmallButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSmallButton__VariantsArgs;
    args?: PlasmicSmallButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSmallButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSmallButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSmallButton__ArgProps,
          internalVariantPropNames: PlasmicSmallButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSmallButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSmallButton";
  } else {
    func.displayName = `PlasmicSmallButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSmallButton = Object.assign(
  // Top-level PlasmicSmallButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSmallButton
    internalVariantProps: PlasmicSmallButton__VariantProps,
    internalArgProps: PlasmicSmallButton__ArgProps
  }
);

export default PlasmicSmallButton;
/* prettier-ignore-end */
